/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.toystore.form;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Asus
 */

public class SearchWithSuggestions extends javax.swing.JFrame {

    /**
     * Creates new form SearchWithSuggestions
     */
    private JTextField searchField;
    private JList<String> suggestionList;
    private DefaultListModel<String> suggestionListModel;

    public SearchWithSuggestions() {
        setTitle("Search with Suggestions");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        initComponents();
//                initComponentsa();
      setupUI();

    }
    
    
     private void setupUI() {
        setLayout(new BorderLayout());

        searchField = new JTextField();
        suggestionListModel = new DefaultListModel<>();
        suggestionList = new JList<>(suggestionListModel);

        add(searchField, BorderLayout.NORTH);
        add(new JScrollPane(suggestionList), BorderLayout.CENTER);

        searchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String searchTerm = searchField.getText();
                List<String> suggestions = getSuggestions(searchTerm);
                updateSuggestionList(suggestions);
            }
        });
    }

    private List<String> getSuggestions(String searchTerm) {
        // Thay thế hàm này với logic của bạn để lấy gợi ý từ dữ liệu thực tế
        List<String> dummyData = List.of("Apple", "Banana", "Cherry", "Date", "Grape");
        List<String> suggestions = new ArrayList<>();

        for (String item : dummyData) {
            if (item.toLowerCase().contains(searchTerm.toLowerCase())) {
                suggestions.add(item);
            }
        }

        return suggestions;
    }

    private void updateSuggestionList(List<String> suggestions) {
        suggestionListModel.clear();

        for (String suggestion : suggestions) {
            suggestionListModel.addElement(suggestion);
        }
    }

//    private void initComponentsa() {
//        setLayout(new BorderLayout());
//
//        searchField = new JTextField();
//        searchField.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                // Handle the search action
//                String searchTerm = searchField.getText();
//                performSearch(searchTerm);
//            }
//        });
//
//        suggestionListModel = new DefaultListModel<>();
//        suggestionList = new JList<>(suggestionListModel);
//        suggestionList.setVisibleRowCount(5);
//        suggestionList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        suggestionList.addListSelectionListener(e -> {
//            if (!e.getValueIsAdjusting()) {
//                String selectedValue = suggestionList.getSelectedValue();
//                searchField.setText(selectedValue);
//            }
//        });
//
//        JScrollPane suggestionScrollPane = new JScrollPane(suggestionList);
//
//        add(searchField, BorderLayout.NORTH);
//        add(suggestionScrollPane, BorderLayout.CENTER);
//    }

    private void performSearch(String searchTerm) {
        // Replace this with your actual search logic
        List<String> searchResults = getSearchResults(searchTerm);

        // Update the suggestion list
        suggestionListModel.removeAllElements();
        for (String result : searchResults) {
            suggestionListModel.addElement(result);
        }
    }

    private List<String> getSearchResults(String searchTerm) {
        // Replace this with your actual search logic
        List<String> dummyData = new ArrayList<>();
        dummyData.add("Result 1");
        dummyData.add("Result 2");
        dummyData.add("Result 3");
        return dummyData;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchWithSuggestions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchWithSuggestions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchWithSuggestions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchWithSuggestions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchWithSuggestions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
