/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.toystore.form;
  import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Asus
 */
public class ProductDisplayApp extends JFrame {

//public class ProductDisplayApp extends JFrame {
    private JTable productTable;
    private JScrollPane scrollPane;

    public ProductDisplayApp() {
        setTitle("Product Display App");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Khởi tạo bảng và scrollPane
        productTable = new JTable();
        scrollPane = new JScrollPane(productTable);

        // Thêm scrollPane vào JFrame
        add(scrollPane);

        // Lấy dữ liệu từ cơ sở dữ liệu và hiển thị trong bảng
        displayProductData();
    }

    private void displayProductData() {
        try {
            // Kết nối đến cơ sở dữ liệu (Thay thế thông tin kết nối của bạn)
            Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Tore;user=sa;password=123;encrypt=true;trustServerCertificate=true;");

            // Truy vấn để lấy dữ liệu từ bảng sanpham
            String query = "SELECT * FROM sanpham";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Tạo DefaultTableModel để lưu trữ dữ liệu của bảng
            DefaultTableModel model = new DefaultTableModel();
            productTable.setModel(model);

            // Lấy thông tin về metadata để xác định số cột
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Thêm tên cột vào model
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(metaData.getColumnName(i));
            }

            // Thêm dữ liệu từ ResultSet vào model
            while (resultSet.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = resultSet.getObject(i);
                }
                model.addRow(row);
            }

            // Đóng các kết nối
            resultSet.close();
            preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ProductDisplayApp app = new ProductDisplayApp();
            app.setVisible(true);
        });
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
