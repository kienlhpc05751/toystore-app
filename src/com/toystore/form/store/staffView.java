/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.toystore.form.store;

//import com.raven.dao.NhanVienDao;
import com.toystore.form.*;
import com.toystore.dao.store.AccountDAO;
import com.toystore.utils.XDialogHelper;
import com.toystore.utils.XShareHelper;
import com.toystore.main.Main;
import com.toystore.model.NhanVien;
import com.toystore.model.store.Account;
import com.toystore.utils.Auth;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.toystore.utils.MsgBox;
import com.toystore.utils.XDate;
import com.toystore.utils.XImage;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author RAVEN
 */
public class staffView extends javax.swing.JPanel {

    /**
     * Creates new form Form_1
     */
//        NhanVienDao nvDao = new NhanVienDao();
    int index = -1; // vị trí của nhân viên đang hiển thị trên form
    public int row = 0;

    List<NhanVien> nhanVienList = new ArrayList<>();

    List<Account> accountList = new ArrayList<>();
    AccountDAO accountDAO = new AccountDAO();

    public staffView() {
        initComponents();
        accountList = accountDAO.findAll();
        fillTable(accountList);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
//    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnUpdate = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblMaNV = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        lblMaNV1 = new javax.swing.JLabel();
        lblMaNV5 = new javax.swing.JLabel();
        lblMaNV6 = new javax.swing.JLabel();
        lblMaNV7 = new javax.swing.JLabel();
        lblngaysinh = new javax.swing.JLabel();
        lblMaNV8 = new javax.swing.JLabel();
        txtTenNV = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        txtMatKhau = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        txtEmail = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        lblHinhAnh = new javax.swing.JLabel();
        cboNhanVien = new javax.swing.JRadioButton();
        cboQuanLy = new javax.swing.JRadioButton();
        txtSDT = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jSeparator7 = new javax.swing.JSeparator();
        pnButton = new javax.swing.JPanel();
        btnfirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        pnList = new javax.swing.JPanel();

        setBackground(new java.awt.Color(170, 211, 255));
        setMinimumSize(new java.awt.Dimension(1040, 720));
        setPreferredSize(new java.awt.Dimension(950, 580));

        jPanel1.setBackground(new java.awt.Color(170, 211, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(1040, 714));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(960, 683));
        jPanel1.setLayout(new java.awt.BorderLayout());

        lblTitle.setFont(new java.awt.Font("Roboto", 1, 28)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 102, 102));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Management Staff");
        lblTitle.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel1.add(lblTitle, java.awt.BorderLayout.PAGE_START);

        pnUpdate.setBackground(new java.awt.Color(170, 211, 255));

        jPanel2.setBackground(new java.awt.Color(170, 211, 255));
        jPanel2.setLayout(null);

        lblMaNV.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV.setText("Employee code :");
        jPanel2.add(lblMaNV);
        lblMaNV.setBounds(190, 20, 100, 18);

        txtMaNV.setBorder(null);
        jPanel2.add(txtMaNV);
        txtMaNV.setBounds(190, 50, 355, 30);

        lblMaNV1.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV1.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV1.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV1.setText("Employee name :");
        jPanel2.add(lblMaNV1);
        lblMaNV1.setBounds(190, 90, 110, 18);

        lblMaNV5.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV5.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV5.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV5.setText("Password :");
        jPanel2.add(lblMaNV5);
        lblMaNV5.setBounds(190, 160, 80, 18);

        lblMaNV6.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV6.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV6.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV6.setText("Email :");
        jPanel2.add(lblMaNV6);
        lblMaNV6.setBounds(570, 20, 90, 18);

        lblMaNV7.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV7.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV7.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV7.setText("Number phone :");
        jPanel2.add(lblMaNV7);
        lblMaNV7.setBounds(570, 90, 106, 18);

        lblngaysinh.setBackground(new java.awt.Color(102, 0, 204));
        lblngaysinh.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblngaysinh.setForeground(new java.awt.Color(27, 51, 61));
        lblngaysinh.setText("Date of birth :");
        jPanel2.add(lblngaysinh);
        lblngaysinh.setBounds(570, 160, 100, 18);

        lblMaNV8.setBackground(new java.awt.Color(102, 0, 204));
        lblMaNV8.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        lblMaNV8.setForeground(new java.awt.Color(27, 51, 61));
        lblMaNV8.setText("Position");
        jPanel2.add(lblMaNV8);
        lblMaNV8.setBounds(830, 170, 80, 18);

        txtTenNV.setBorder(null);
        txtTenNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenNVActionPerformed(evt);
            }
        });
        jPanel2.add(txtTenNV);
        txtTenNV.setBounds(190, 120, 355, 29);
        jPanel2.add(jSeparator6);
        jSeparator6.setBounds(190, 150, 355, 10);

        txtMatKhau.setBorder(null);
        jPanel2.add(txtMatKhau);
        txtMatKhau.setBounds(190, 190, 355, 33);
        jPanel2.add(jSeparator2);
        jSeparator2.setBounds(190, 224, 355, 10);

        txtEmail.setBorder(null);
        jPanel2.add(txtEmail);
        txtEmail.setBounds(570, 50, 355, 29);
        jPanel2.add(jSeparator3);
        jSeparator3.setBounds(570, 80, 355, 10);

        lblHinhAnh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        lblHinhAnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhAnhMouseClicked(evt);
            }
        });
        jPanel2.add(lblHinhAnh);
        lblHinhAnh.setBounds(14, 14, 158, 170);

        buttonGroup1.add(cboNhanVien);
        cboNhanVien.setText("Staff");
        cboNhanVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNhanVienActionPerformed(evt);
            }
        });
        jPanel2.add(cboNhanVien);
        cboNhanVien.setBounds(830, 200, 98, 23);

        buttonGroup1.add(cboQuanLy);
        cboQuanLy.setText("customer");
        cboQuanLy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboQuanLyActionPerformed(evt);
            }
        });
        jPanel2.add(cboQuanLy);
        cboQuanLy.setBounds(920, 200, 98, 23);

        txtSDT.setBorder(null);
        txtSDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });
        jPanel2.add(txtSDT);
        txtSDT.setBounds(570, 120, 350, 29);
        jPanel2.add(jSeparator5);
        jSeparator5.setBounds(570, 150, 355, 10);
        jPanel2.add(jDateChooser1);
        jDateChooser1.setBounds(570, 190, 190, 33);
        jPanel2.add(jSeparator7);
        jSeparator7.setBounds(190, 80, 355, 10);

        pnButton.setBackground(new java.awt.Color(255, 255, 255));
        pnButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnfirst.setBackground(new java.awt.Color(204, 204, 204));
        btnfirst.setText("|<");
        btnfirst.setBorderPainted(false);
        btnfirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfirstActionPerformed(evt);
            }
        });

        btnPrev.setBackground(new java.awt.Color(204, 204, 204));
        btnPrev.setText("<<");
        btnPrev.setBorderPainted(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(204, 204, 204));
        btnNext.setText(">>");
        btnNext.setBorderPainted(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setBackground(new java.awt.Color(204, 204, 204));
        btnLast.setText(">|");
        btnLast.setBorderPainted(false);
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnThem.setBackground(new java.awt.Color(204, 204, 204));
        btnThem.setText("Add");
        btnThem.setBorderPainted(false);
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(204, 204, 204));
        btnSua.setText("Update");
        btnSua.setBorderPainted(false);
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(204, 204, 204));
        btnXoa.setText("Delete");
        btnXoa.setBorderPainted(false);
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(204, 204, 204));
        btnLamMoi.setText("Refresh");
        btnLamMoi.setBorderPainted(false);
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnButtonLayout = new javax.swing.GroupLayout(pnButton);
        pnButton.setLayout(pnButtonLayout);
        pnButtonLayout.setHorizontalGroup(
            pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnfirst)
                .addGap(18, 18, 18)
                .addComponent(btnPrev)
                .addGap(18, 18, 18)
                .addComponent(btnNext)
                .addGap(18, 18, 18)
                .addComponent(btnLast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(btnThem)
                .addGap(18, 18, 18)
                .addComponent(btnSua)
                .addGap(18, 18, 18)
                .addComponent(btnXoa)
                .addGap(18, 18, 18)
                .addComponent(btnLamMoi)
                .addGap(14, 14, 14))
        );
        pnButtonLayout.setVerticalGroup(
            pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnButtonLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnThem)
                        .addComponent(btnSua)
                        .addComponent(btnXoa)
                        .addComponent(btnLamMoi))
                    .addGroup(pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnfirst)
                        .addComponent(btnPrev)
                        .addComponent(btnNext)
                        .addComponent(btnLast)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel2.add(pnButton);
        pnButton.setBounds(20, 250, 691, 60);

        tblNhanVien.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tblNhanVien.setFont(new java.awt.Font("UTM BryantLG", 1, 14)); // NOI18N
        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee code", "Employee name", "Email", "Number phone", "Date of birth", "Position", "image"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tblNhanVien.setGridColor(new java.awt.Color(204, 204, 204));
        tblNhanVien.setRowHeight(30);
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblNhanVien);

        javax.swing.GroupLayout pnUpdateLayout = new javax.swing.GroupLayout(pnUpdate);
        pnUpdate.setLayout(pnUpdateLayout);
        pnUpdateLayout.setHorizontalGroup(
            pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1008, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnUpdateLayout.setVerticalGroup(
            pnUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnUpdateLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(pnUpdate, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout pnListLayout = new javax.swing.GroupLayout(pnList);
        pnList.setLayout(pnListLayout);
        pnListLayout.setHorizontalGroup(
            pnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );
        pnListLayout.setVerticalGroup(
            pnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );

        jPanel1.add(pnList, java.awt.BorderLayout.LINE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1040, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblNhanVienMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseReleased

    }//GEN-LAST:event_tblNhanVienMouseReleased

    private void cboNhanVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNhanVienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboNhanVienActionPerformed

    private void cboQuanLyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboQuanLyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboQuanLyActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        update();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
//        if (CheckMa()) {
        insert();
//        }else{
//            System.out.println("kiên nè");
//        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
//        this.row = tblNhanVien.getRowCount() - 1;
//        this.edit(index);
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
//        this.index++;
//        this.edit(index);
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
//        this.index--;
//        this.edit(index);
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnfirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfirstActionPerformed
//        this.index = 0;
//        this.edit(index);
        first();
    }//GEN-LAST:event_btnfirstActionPerformed

    private void lblHinhAnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhAnhMouseClicked

//        JFileChooser fileChooser = new JFileChooser();
//        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
//            File file = fileChooser.getSelectedFile();
//            XImage.save(file);
//            ImageIcon img = XImage.read(file.getName());
//            Image img2 = XImage.resize(img.getImage(), lblHinhAnh.getWidth(), lblHinhAnh.getHeight());
//            ImageIcon img3 = new ImageIcon(img2);
//            lblHinhAnh.setIcon(img3);
//            lblHinhAnh.setToolTipText(file.getName());
//        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Hình ảnh", "jpg", "png", "jpeg", "gif"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            File destination = new File("src/com/toystore/image/", fileName);

            // Nếu ảnh chưa tồn tại thì sao chép vào thư mục
            if (!destination.exists()) {
                try {
                    Files.copy(selectedFile.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException e) {
                    e.printStackTrace();
                    MsgBox.alert(this, "Lỗi khi sao chép ảnh!");
                    return;
                }
            }
            // Hiển thị ảnh lên JLabel
            ImageIcon img = new ImageIcon(destination.getAbsolutePath());
            Image resizedImg = img.getImage().getScaledInstance(lblHinhAnh.getWidth(), lblHinhAnh.getHeight(), Image.SCALE_SMOOTH);
            lblHinhAnh.setIcon(new ImageIcon(resizedImg));
            lblHinhAnh.setToolTipText(fileName); // Lưu tên file vào tooltip để lưu vào DB
        }

    }//GEN-LAST:event_lblHinhAnhMouseClicked

    private void txtSDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        clear();

//        boolean a = cboQuanLy.isFontSet();
//        if (!checkFrom()) {
//            insert();
//        }

    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
//        if (evt.getClickCount() == 2) {
//            this.index = tblNhanVien.rowAtPoint(evt.getPoint());
////            if (this.index >= 0) {
////                this.edit();
////                jTabbedPane1.setSelectedIndex(0);
////
////            }
//        }
//        row = table.getSelectedRow();
//        this.edit(row);
        row = tblNhanVien.getSelectedRow();
        this.edit(row);


    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void txtTenNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenNVActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnfirst;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cboNhanVien;
    private javax.swing.JRadioButton cboQuanLy;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblMaNV1;
    private javax.swing.JLabel lblMaNV5;
    private javax.swing.JLabel lblMaNV6;
    private javax.swing.JLabel lblMaNV7;
    private javax.swing.JLabel lblMaNV8;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblngaysinh;
    private javax.swing.JPanel pnButton;
    private javax.swing.JPanel pnList;
    private javax.swing.JPanel pnUpdate;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JPasswordField txtMatKhau;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTenNV;
    // End of variables declaration//GEN-END:variables

    public static ImageIcon read(String fileName) {
        try {
            File file = new File("src/com/toystore/image/" + fileName); // Kiểm tra đường dẫn
            System.out.println("Đang đọc ảnh từ: " + file.getAbsolutePath()); // Debug
            if (file.exists()) {
                return new ImageIcon(ImageIO.read(file));
            } else {
                System.out.println("File không tồn tại: " + file.getAbsolutePath());
                return new ImageIcon("src/com/toystore/image/noimg.jpg");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null; // Trả về null nếu có lỗi
    }

    void load(List<NhanVien> nhanViens) {
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        try {

            for (NhanVien nv : nhanViens) {
                Object[] row = {
                    nv.getMaNV(),
                    nv.getTenNV(),
                    nv.getNgaySinh(),
                    nv.getEmail(),
                    nv.getSDT(),
                    nv.getVaiTro() ? "Quản lý" : "Nhân viên",
                    nv.getHinhAnh()
                };
                model.addRow(row);
//                System.out.println("rỗng");
            }
        } catch (Exception e) {
            e.printStackTrace();
            MsgBox.alert(this, "Lỗi truy vấn!");
        }
    }

    void fillTable(List<Account> listAccount) {
//        String row[] = {"Mã SP", "Tên SP", "Giá SP", "Lượng SP", "Trạng thái SP", "Bar CODE", "___"};
        DefaultTableModel model = new DefaultTableModel(row, 0);
        model.setRowCount(0);
//        DefaultTableModel model = new DefaultTableModel();

        // Thêm các cột
        model.setColumnIdentifiers(new Object[]{"employee ID", "employee name", "employee email", "employee phone number", "date of birth", "position", "photo"});
        tblNhanVien.setModel(model);

        // Thêm dữ liệu mẫu
        for (Account nv : listAccount) {
            model.addRow(new Object[]{nv.getAccountId(),
                nv.getUsername(),
                nv.getEmail(),
                nv.getPhoneNumber(),
                nv.getBirthday(),
                nv.getRoleId(),
                nv.getImage()//                StatusType.PENDING
        });
        }
        // Áp dụng Renderer & Editor cho cột nút
//        table.getColumnModel().getColumn(4).setCellRenderer(new ButtonRendererEditor());
//        table.getColumnModel().getColumn(4).setCellEditor(new ButtonRendererEditor());
        tblNhanVien.setModel(model);
    }

    void edit(int row) {
        Account model = accountList.get(row);
        this.setModel(model);
//        try {
////            String manv = (String) tblNhanVien.getValueAt(this.index, 0);
////            NhanVien model = nvDao.selectById(manv);
//
//
////            if (model != null) {
//////                this.setModel(model);
////                this.setModel(model);
//////                jTabbedPane1.setSelectedIndex(0);
////                this.setStatus(false);
////            }
//        } catch (Exception e) {
//            MsgBox.alert(this, "Lỗi truy vấn 1!");
//        }
    }

    void setModel(Account model) {
        txtMaNV.setText(String.valueOf(model.getAccountId()));
        txtTenNV.setText(model.getUsername());
        txtMatKhau.setText(model.getPassword());
        jDateChooser1.setDate(model.getBirthday());
        txtEmail.setText(model.getEmail());
        txtSDT.setText(model.getPhoneNumber());
//        cboQuanLy.setSelected(model.getRoleId());
//        cboNhanVien.setSelected(!model.getRoleId());

        if (model.getImage() != null) {
            System.out.println("this is image name !: " + model.getImage());
            lblHinhAnh.setToolTipText(model.getImage());
//            ImageIcon icon = XImage.read(p.getImage());  // Tạo ImageIcon từ hình
            ImageIcon icon = read(model.getImage());
            lblHinhAnh.setIcon(icon);
            // Cập nhật kích thước hình cho lslHinh
            int width = lblHinhAnh.getWidth();
            int height = lblHinhAnh.getHeight();
            if (width > 0 && height > 0) {
                Image img = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
                lblHinhAnh.setIcon(new ImageIcon(img));
            }
        } else {
            lblHinhAnh.setIcon(null);
        }

//        if (model.getImage() != null) {
//            lblHinhAnh.setToolTipText(model.getImage());
//            ImageIcon icon = XImage.read(model.getImage());  // Tạo ImageIcon từ hình
//
////            System.out.println(icon.);
//            lblHinhAnh.setIcon(icon);
//            // Cập nhật kích thước hình cho lblHinh
//            int width = lblHinhAnh.getWidth();
//            int height = lblHinhAnh.getHeight();
//            if (width > 0 && height > 0) {
//                Image img = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
//                lblHinhAnh.setIcon(new ImageIcon(img));
//            }
//        } else {
//            lblHinhAnh.setIcon(null);
//        }
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    Account getModel() {
        Account model = new Account();
        model.setAccountId(Integer.parseInt(txtMaNV.getText()));
        model.setUsername(txtTenNV.getText());
//        model.setMatKhau(new String(txtMatKhau.getPassword()));
        model.setPassword(Auth.hashPassword(txtMatKhau.getText()));
        model.setBirthday(jDateChooser1.getDate());
        model.setEmail(txtEmail.getText());
        model.setPhoneNumber(txtSDT.getText());
//        model.setRoleId(cboQuanLy.isSelected());
        model.setRoleId(1);
        Date date = jDateChooser1.getDate();
//        model.setBirthday(sdf.format(date));
        model.setImage(lblHinhAnh.getToolTipText());
        System.out.println(lblHinhAnh.getToolTipText() + " getform");
        return model;
    }

    void setStatus(boolean insertable) {
        txtMaNV.setEditable(insertable);
        btnThem.setEnabled(insertable);
        btnSua.setEnabled(!insertable);
        btnXoa.setEnabled(!insertable);

        boolean first = this.index > 0;
        boolean last = this.index < tblNhanVien.getRowCount() - 1;
        btnfirst.setEnabled(!insertable && first);
        btnPrev.setEnabled(!insertable && first);
        btnNext.setEnabled(!insertable && last);
        btnLast.setEnabled(!insertable && last);
    }

    void insert() {
        if (Auth.isManager()) {
            Account nv = getModel();
            try {
                accountDAO.insertAccount(nv);
                accountList = accountDAO.findAll();
                fillTable(accountList);
//                this.load(nhanVienList);
//            this.clear();
                MsgBox.alert(this, "Add new success!");
            } catch (Exception e) {
                MsgBox.alert(this, "Add failed!");
            }
        } else {
            MsgBox.alert(this, "You do not have permission to add employees!");
        }

    }

    void update() {
        if (Auth.isManager()) {
            Account nv = getModel();
            try {
                accountDAO.updateAccount(nv);
                accountList = accountDAO.findAll();
                fillTable(accountList);
                MsgBox.alert(this, "Update success!");
            } catch (Exception e) {
                e.printStackTrace();
                MsgBox.alert(this, "Update failed!");
            }
        } else {
            MsgBox.alert(this, "You do not have the right to change employees");
        }
    }

    void delete() {
        if (Auth.isManager()) {
            if (MsgBox.confirm(this, "Do you really want to delete this employee?")) {
                String manv = txtMaNV.getText();
                try {
                    accountDAO.deleteAccount(Integer.parseInt(manv));
                    accountList = accountDAO.findAll();
                    fillTable(accountList);
                    this.clear();
                    MsgBox.alert(this, "Delete success!");
                } catch (Exception e) {
                    e.printStackTrace();
                    MsgBox.alert(this, "Delete failed!");
                }
            }
        } else {
            MsgBox.alert(this, "You do not have permission to delete employees!");
        }
    }

    void clear() {
        this.setModel(new Account());
        this.setStatus(true);
        this.row = -1;
    }

//    public boolean CheckMa() {
//        List<String> list = new ArrayList<>();
//        for (NhanVien nv : listNV) {
//            if (txtMaNV.getText() == nv.getMaNV()) {
//                list.add("Mã Sp đã có");
//                txtMaNV.setBackground(Color.blue);
//            } else {
//                txtMaNV.setBackground(null);
//            }
//        }
//        if (!list.isEmpty()) {
//            StringBuilder errorMessage = new StringBuilder("Lỗi:\n");
//            for (String error : list) {
//                errorMessage.append("- ").append(error).append("\n");
//            }
//            MsgBox.alert(this, errorMessage.toString());
//            return false;
//        }
//        return true;
//    }
    public boolean checkFrom() {
//          String ma = txtMaNV
        // List to store error messages
        List<String> errorMessages = new ArrayList<>();

        // có thể thay đổi
        if (txtMatKhau.getText().isEmpty()) {
            errorMessages.add("Please enter password!");
            txtMatKhau.setBackground(Color.red);
            txtMatKhau.requestFocus();
        } else {
            txtMatKhau.setBackground(null);  // Reset background to white if not empty
        }

        if (txtMaNV.getText().isEmpty()) {
            errorMessages.add("Please get employee code!");
            txtMaNV.setBackground(Color.red);
            txtMaNV.requestFocus();
        } else if (txtMaNV.getText().length() > 5) {
            errorMessages.add("Please enter less than 5 characters !");
            txtMaNV.setBackground(Color.red);
            txtMaNV.requestFocus();
        } else {
            txtMaNV.setBackground(null);  // Reset background to white if not empty
        }

        if (txtTenNV.getText().isEmpty()) {
            errorMessages.add("Please enter employee name!");
            txtTenNV.setBackground(Color.red);
            txtTenNV.requestFocus();
        } else {
            txtTenNV.setBackground(null);  // Reset background to white if not empty
        }

        try {

            int SDT = Integer.parseInt(txtSDT.getText());
            txtSDT.setBackground(null);  // Reset background to white if not empty
            if (txtSDT.getText().isEmpty()) {
                errorMessages.add("Please enter product name !");
                txtSDT.setBackground(Color.red);
                txtSDT.requestFocus();
            } else if (SDT > 11) {
                errorMessages.add("Please enter a valid phone number!");
                txtSDT.setBackground(Color.red);
                txtSDT.requestFocus();
            } else {
                txtSDT.setBackground(null);  // Reset background to white if not empty
            }

        } catch (NumberFormatException e) {
            // Handle the exception (e.g., display an error message or log it)
            errorMessages.add("Please enter the correct phone number format!");
            txtSDT.setBackground(Color.red);
            txtSDT.requestFocus();
        }
        if (txtEmail.getText().equalsIgnoreCase("")) {
            errorMessages.add("Please enter Email!");
            txtEmail.requestFocus();
            txtEmail.setBackground(Color.red);
        } else {
            txtEmail.setBackground(Color.white);
        }

        String EMAIL_REGEX = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z0-9.-]{1,3}$";

        if (!txtEmail.getText().matches(EMAIL_REGEX)) {
            errorMessages.add("Please enter the correct phone number format!");
            txtEmail.setBackground(Color.red);
            txtEmail.requestFocus();
        } else {
            txtEmail.setBackground(null);

        }
//          Date date = new Date();
//        jDateChooser1.setDate(date);

        LocalDate selectedDate = jDateChooser1.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate currentDate = LocalDate.now();
        // Tính toán tuổi bằng cách lấy hiệu của năm hiện tại và năm được chọn
        int age = Period.between(selectedDate, currentDate).getYears();
        if (!(age >= 18)) {
            lblngaysinh.setBackground(Color.red);
            errorMessages.add("The person is not younger than 18");
            System.out.println("The person is not younger than 18.");
        } else {
            lblngaysinh.setBackground(null);
            System.out.println("The person is younger than 18.");
        }

        // chest combobox 
        ButtonModel selectedIndex = buttonGroup1.getSelection();
        if (selectedIndex == null) {
            System.out.println("Chưa chọn mục nào trong ComboBox.");
        } else {
            System.out.println("Đã chọn mục có index: " + selectedIndex);
        }

        if (!errorMessages.isEmpty()) {
            // Display error messages
            StringBuilder errorMessage = new StringBuilder("Lỗi:\n");
            for (String error : errorMessages) {
                errorMessage.append("- ").append(error).append("\n");
            }
            MsgBox.alert(this, errorMessage.toString());

            // Return false indicating errors
            return false;
        }

        // Return true if no errors
        return true;
    }

    void first() {
        this.row = 0;
        this.edit(row);
    }

    void prev() {
        if (this.row < 1) {
            return;
        } else {
            this.row--;
            this.edit(row);
        }
    }

    void next() {
        if (this.row > tblNhanVien.getRowCount() - 2) {
            return;
        } else {
            this.row++;
            this.edit(row);
        }
    }

    void last() {
        this.row = tblNhanVien.getRowCount() - 1;
        this.edit(row);
    }

}
